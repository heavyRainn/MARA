package com.care.voice.core

object TextSanitizer {

    fun forUi(raw: String): String =
        raw
            .removeCodeBlocks()
            .removeInlineCode()
            .stripMarkdownDecor()
            .normalizeLists(keepBullets = true)
            .removeBulletDashes()          // üëà —É–±–µ—Ä—ë–º –¥–µ—Ñ–∏—Å-–±—É–ª–ª–µ—Ç—ã –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫
            .removeBackticksAndStars()     // üëà –≤—ã–∫–∏–Ω–µ–º –±—ç–∫—Ç–∏–∫–∏/–∑–≤—ë–∑–¥–æ—á–∫–∏ –≤—Å–µ—Ö –≤–∏–¥–æ–≤
            .normalizePunctuation()
            .normalizeQuotes()
            .collapseSpaces()
            .trim()

    fun forTts(raw: String): String =
        raw
            .removeCodeBlocks()
            .removeInlineCode()
            .stripMarkdownDecor()
            .normalizeLists(keepBullets = false)
            .removeUrls()
            .removeEmojiAndSymbols()
            .removeBulletDashes()          // üëà –¥–µ—Ñ–∏—Å—ã –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫
            .removeBackticksAndStars()     // üëà –±—ç–∫—Ç–∏–∫–∏/–∑–≤—ë–∑–¥—ã
            .removeInlineDashPauses()      // üëà ¬´ - ¬ª/¬´ ‚Äî ¬ª –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            .normalizePunctuation()
            .normalizeQuotes()
            .collapseSpaces()
            .trim()
            .ensureSentenceEnding()


    // ---------- —à–∞–≥–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞ –Ω–∏–∂–µ ----------
    private fun String.removeCodeBlocks(): String =
        // ```code``` –∏–ª–∏ ~~~code~~~
        replace(Regex("(?s)```.*?```|~~~.*?~~~"), " ")

    private fun String.removeInlineCode(): String =
        // `inline`
        replace(Regex("`([^`]+)`"), "$1")

    private fun String.stripMarkdownDecor(): String =
        // **bold**, *italic*, __bold__, _italic_, ~~strike~~, –∑–∞–≥–æ–ª–æ–≤–∫–∏ '#'
        replace(Regex("[*_~]{1,2}"), "")
            .replace(Regex("(?m)^#{1,6}\\s*"), "")   // –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫
            .replace(Regex("(?m)^>\\s?"), "")        // —Ü–∏—Ç–∞—Ç—ã >

    /**
     * –°–ø–∏—Å–∫–∏:
     * - "1. ", "1) ", "(1) " ‚Üí —É–±–∏—Ä–∞–µ–º —Ü–∏—Ñ—Ä—É; –µ—Å–ª–∏ keepBullets=true –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ "‚Äî "
     * - "- ", "* ", "‚Ä¢ " ‚Üí —É–±–∏—Ä–∞–µ–º –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ "‚Äî "
     */
    private fun String.normalizeLists(keepBullets: Boolean): String {
        val bullet = if (keepBullets) "‚Äî " else ""
        var s = this
        s = s.replace(Regex("(?m)^\\s*(\\d+)[\\.)]\\s+"), bullet)  // 1. 1)
        s = s.replace(Regex("(?m)^\\s*\\(\\d+\\)\\s+"), bullet)    // (1)
        s = s.replace(Regex("(?m)^\\s*[-*‚Ä¢¬∑]\\s+"), bullet)        // - * ‚Ä¢
        return s
    }

    private fun String.removeUrls(): String =
        replace(Regex("(https?://|www\\.)\\S+"), " ") // –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ "—Å—Å—ã–ª–∫–∞"

    /** –£–¥–∞–ª—è–µ–º —Å–º–∞–π–ª—ã/–ø–∏–∫—Ç–æ–≥—Ä–∞–º–º—ã/—Ç–µ—Ö–∑–Ω–∞–∫–∏ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã –∏ –±–∞–∑–æ–≤—É—é –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é */
    private fun String.removeEmojiAndSymbols(): String =
        map { ch ->
            if (ch.isLetterOrDigit() || " .,!?:;()-¬´¬ª\"".indexOf(ch) >= 0) ch else ' '
        }.joinToString("")

    private fun Char.isLetterOrDigit(): Boolean =
        this.isLetter() || this.isDigit()

    private fun String.removeBackticksAndApostrophes(): String =
        replace("`", " ")
            .replace("‚Äô", "")
            .replace("'", "")

    /** –ü—Ä–∏–≤–æ–¥–∏–º –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é –≤ –ø–æ—Ä—è–¥–æ–∫: —É–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä—ã, —Å—Ç–∞–≤–∏–º –ø—Ä–æ–±–µ–ª—ã –≥–¥–µ –Ω—É–∂–Ω–æ */
    private fun String.normalizePunctuation(): String {
        var s = this

        // —Ç—Ä–æ–µ—Ç–æ—á–∏–µ ‚Üí ¬´‚Ä¶¬ª
        s = s.replace(Regex("\\.\\.{2,}"), "‚Ä¶")

        // –ü–æ–≤—Ç–æ—Ä—ã –∑–Ω–∞–∫–æ–≤ ‚Üí –æ–¥–∏–Ω –∑–Ω–∞–∫
        s = s.replace(Regex("([!?.,;:])\\1+"), "$1")

        // –¢–∏—Ä–µ –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É –¥–ª–∏–Ω–Ω–æ–º—É (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
        s = s.replace(Regex("\\s*-{2,}\\s*"), " ‚Äî ")

        // –ü—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–µ–π ‚Äî —É–±—Ä–∞—Ç—å; –ø–æ—Å–ª–µ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å
        s = s.replace(Regex("\\s+([!?.,;:])"), "$1")
        s = s.replace(Regex("([!?.,;:])(\\S)"), "$1 $2")

        // –õ–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤–Ω—É—Ç—Ä–∏ —Å–∫–æ–±–æ–∫
        s = s.replace(Regex("\\(\\s+"), "(").replace(Regex("\\s+\\)"), ")")

        return s
    }

    /** –ü—Ä–∏–≤–æ–¥–∏–º –∫–∞–≤—ã—á–∫–∏ –∫ —Ä—É—Å—Å–∫–∏–º ¬´—ë–ª–æ—á–∫–∞–º¬ª */
    private fun String.normalizeQuotes(): String =
        this.replace("‚Äú", "¬´")
            .replace("‚Äù", "¬ª")
            .replace("‚Äû", "¬´")
            .replace("\"", "") // —É–±–∏—Ä–∞–µ–º –ø—Ä—è–º—ã–µ, —á—Ç–æ–±—ã TTS –Ω–µ –±–æ—Ä–º–æ—Ç–∞–ª

    private fun String.collapseSpaces(): String =
        replace(Regex("[ \\t\\u00A0]{2,}"), " ")
            .replace(Regex("(?m)^\\s+"), "")
            .replace(Regex("(?m)\\s+$"), "")
            .replace(Regex("\\n{3,}"), "\n\n")

    private fun String.ensureSentenceEnding(): String =
        if (isBlank()) this
        else if (trimEnd().last() !in ".!?‚Ä¶") this.trimEnd() + "."
        else this.trimEnd()

    // 2) –ó–ê–ú–ï–ù–ò —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é removeBackticksAndApostrophes() –Ω–∞ –≠–¢–£:

    /** –£–¥–∞–ª—è–µ–º –¥–µ—Ñ–∏—Å/—Ç–∏—Ä–µ –∫–∞–∫ –±—É–ª–ª–µ—Ç –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫: -, ‚Äì, ‚Äî, ‚Äí, ‚àí */
    private fun String.removeBulletDashes(): String =
        replace(Regex("(?m)^\\s*[\\-‚Äì‚Äî‚Äí‚àí]\\s+"), "") // –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏: –¥–µ—Ñ–∏—Å + –ø—Ä–æ–±–µ–ª ‚Üí –ø—É—Å—Ç–æ

    /** –£–±–∏—Ä–∞–µ–º ¬´–ø–∞—É–∑—ã¬ª –≤–∏–¥–∞ ' - ' / ' ‚Äî ' –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞ (–¥–ª—è TTS), –Ω–µ —Ç—Ä–æ–≥–∞–µ–º —Å–æ—Å—Ç–∞–≤–Ω—ã–µ —Å–ª–æ–≤–∞ */
    private fun String.removeInlineDashPauses(): String =
        replace(Regex("\\s+[\\-‚Äì‚Äî‚Äí‚àí]\\s+"), " ") // –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏ –¥–µ—Ñ–∏—Å/—Ç–∏—Ä–µ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ ‚Üí –ø—Ä–æ–±–µ–ª

    /** –ñ—ë—Å—Ç–∫–æ —É–±–∏—Ä–∞–µ–º –±—ç–∫—Ç–∏–∫–∏/–∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã/—Ç–∏–ø–æ–≥—Ä–∞—Ñ—Å–∫–∏–µ –∫–∞–≤—ã—á–∫–∏ –∏ –ª—é–±—ã–µ "–∑–≤—ë–∑–¥–æ—á–∫–∏" */
    private fun String.removeBackticksAndStars(): String {
        val remove = setOf(
            // backticks
            '\u0060', // `
            '\uFF40', // ÔΩÄ fullwidth
            // primes / reversed primes
            '\u2032','\u2033','\u2034','\u2035','\u2036',
            // acute/grave/modifiers/apostrophes
            '\u00B4','\u02CB','\u02CA','\u02BC','\u02B9','\u02BB','\u02BD','\u02BE','\u02BF','\u02C8',
            // typographic quotes + "
            '\u2018','\u2019','\u201A','\u201B','\u201C','\u201D','\u201E','\u201F','\"',
            // stars (ASCII, fullwidth, math/star glyphs)
            '\u002A','\uFF0A','\u204E','\u2217','\u22C6',
            '\u2729','\u272A','\u272D','\u272F','\u2730','\u2731','\u2732','\u2733','\u2734','\u2735',
            '\u2736','\u2737','\u2738','\u2739','\u273A','\u273B','\u273C','\u2605','\u2606'
        )
        val sb = StringBuilder(length)
        for (ch in this) sb.append(if (ch in remove) ' ' else ch)
        return sb.toString().replace(Regex(" {2,}"), " ")
    }


}
